[{"C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\index.js":"1","C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\store.js":"2","C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\App.js":"3","C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\features\\users.js":"4","C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\features\\rating.js":"5","C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\components\\Home.js":"6","C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\components\\quiz\\Play.js":"7","C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\components\\quiz\\Research.js":"8","C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\components\\quiz\\QuizSummary.js":"9","C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\components\\quiz\\Category.js":"10","C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\components\\quiz\\QuizHistory.js":"11","C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\components\\quiz\\LineComponent.js":"12","C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\components\\auth\\Login.js":"13","C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\components\\auth\\Signup.js":"14","C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\features\\history.js":"15","C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\components\\quiz\\Percentage.js":"16","C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\components\\quiz\\ChartComponent.js":"17","C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\components\\quiz\\RateStars.js":"18","C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\utils\\sounds.js":"19","C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\utils\\questions.js":"20","C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\firebase.js":"21"},{"size":546,"mtime":1676737745537,"results":"22","hashOfConfig":"23"},{"size":946,"mtime":1676737745553,"results":"24","hashOfConfig":"23"},{"size":1843,"mtime":1676737745522,"results":"25","hashOfConfig":"23"},{"size":2469,"mtime":1676737746287,"results":"26","hashOfConfig":"23"},{"size":2331,"mtime":1676737746256,"results":"27","hashOfConfig":"23"},{"size":2191,"mtime":1676737745896,"results":"28","hashOfConfig":"23"},{"size":14766,"mtime":1676837799029,"results":"29","hashOfConfig":"23"},{"size":5638,"mtime":1676737746193,"results":"30","hashOfConfig":"23"},{"size":4135,"mtime":1676737746147,"results":"31","hashOfConfig":"23"},{"size":2169,"mtime":1676928573858,"results":"32","hashOfConfig":"23"},{"size":4176,"mtime":1676836532952,"results":"33","hashOfConfig":"23"},{"size":2487,"mtime":1676928845726,"results":"34","hashOfConfig":"23"},{"size":2978,"mtime":1676737745928,"results":"35","hashOfConfig":"23"},{"size":3316,"mtime":1676737745959,"results":"36","hashOfConfig":"23"},{"size":1191,"mtime":1676737746225,"results":"37","hashOfConfig":"23"},{"size":1000,"mtime":1676737746068,"results":"38","hashOfConfig":"23"},{"size":1624,"mtime":1676929312420,"results":"39","hashOfConfig":"23"},{"size":781,"mtime":1676737746162,"results":"40","hashOfConfig":"23"},{"size":356,"mtime":1676737746740,"results":"41","hashOfConfig":"23"},{"size":1214,"mtime":1676737746709,"results":"42","hashOfConfig":"23"},{"size":1057,"mtime":1673346680000,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1193rix",{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},"C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\index.js",[],[],"C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\store.js",["121"],[],"import { configureStore } from \"@reduxjs/toolkit\";\nimport userReducer from \"./features/users\";\nimport rateReducer from \"./features/rating\";\nimport { setUser, updateUser } from \"./features/users\";\nimport rating, { addRating, getRating, updateRating } from \"./features/rating\";\n\nexport const mapStateToProps = (state) => {\n  return {\n    user: state.users,\n    rate: state.rates,\n  };\n};\n\nexport const mapDispatchToProps = (dispatch) => {\n  return {\n    updateUser: (data) => dispatch(updateUser(data)),\n    getUser: (data) => dispatch(setUser(data)),\n    getRating: (id) => dispatch(getRating(id)),\n    addRating: (data) => dispatch(addRating(data)),\n    updateRating: (data) => dispatch(updateRating(data)),\n  };\n};\n\nexport const Store = configureStore({\n  reducer: {\n    users: userReducer,\n    rates: rateReducer,\n  },\n  middleware: (getDefaultMiddleware) => {\n    return getDefaultMiddleware({\n      serializableCheck: false,\n    });\n  },\n});\n","C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\App.js",["122"],[],"import React, { useEffect } from \"react\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nimport Home from \"./components/Home\";\nimport Play from \"./components/quiz/Play\";\nimport ResearchForm from \"./components/quiz/Research\";\nimport QuizSummary from \"./components/quiz/QuizSummary\";\nimport Login from \"./components/auth/Login\";\nimport Signup from \"./components/auth/Signup\";\nimport Category from \"./components/quiz/Category\";\nimport { setUser } from \"./features/users\";\nimport { useDispatch } from \"react-redux\";\nimport LineComponent from \"./components/quiz/LineComponent\";\nimport QuizHistory from \"./components/quiz/QuizHistory\";\n//import NewQuizSummary from './components/quiz/newQuizSummary';\n\nfunction App() {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const datas = JSON.parse(localStorage.getItem(\"user\"));\n    if (datas) {\n      dispatch(setUser(datas));\n    }\n  }, [dispatch]);\n\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"/login\" element={<Login />} />\n        <Route path=\"/signup\" element={<Signup />} />\n        <Route path=\"/play/quiz\" element={<Play />} />\n        <Route path=\"/play/Python\" element={<Play />} />\n        <Route path=\"/play/Data\" element={<Play />} />\n        <Route path=\"/play/Operation\" element={<Play />} />\n        <Route path=\"/play/Linux\" element={<Play />} />\n        <Route path=\"/play/OOP\" element={<Play />} />\n        <Route path=\"/play/General\" element={<Play />} />\n\n        <Route path=\"/play/category\" element={<Category />} />\n        <Route path=\"/play/research\" element={<ResearchForm />} />\n        <Route path=\"/play/quizSummary\" element={<QuizSummary />} />\n        <Route path=\"/play/history\" element={<QuizHistory />} />\n      </Routes>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\features\\users.js",[],[],"C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\features\\rating.js",["123","124","125"],[],"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport {\n  getDoc,\n  setDoc,\n  doc,\n  updateDoc,\n  getDocs,\n  collection,\n  where,\n} from \"firebase/firestore\";\nimport { firestore } from \"../firebase\";\n\nexport const getRating = createAsyncThunk(\n  \"appQuestions/getRating\",\n  async (questionId) => {\n    const snap = await getDoc(doc(firestore, \"ratings\", questionId)); //questionId)) // TODO: change to questionId\n    // console.log(\"getRating => \", snap.data())\n    // localStorage.setItem(\"user\", JSON.stringify({id:id, ...snap.data()}))\n    return snap.data() === undefined\n      ? {\n          questionId: questionId,\n          userRate: [],\n          ratesCount: 0,\n          ratesSum: 0,\n        }\n      : snap.data();\n  }\n);\n\nexport const addRating = createAsyncThunk(\n  \"appQuestions/createRating\",\n  async (data) => {\n    await setDoc(doc(firestore, \"ratings\", data.questionId), {\n      questionId: data.questionId,\n      userRate: data.userRate,\n      ratesCount: data.ratesCount,\n      ratesSum: data.ratesSum,\n    });\n    return {\n      questionId: data.questionId,\n      userRate: data.userRate,\n      ratesCount: data.ratesCount,\n      ratesSum: data.ratesSum,\n    };\n  }\n);\n\nexport const updateRating = createAsyncThunk(\n  \"appQuestions/updateRating\",\n  async (data, { dispatch }) => {\n    await updateDoc(doc(firestore, \"ratings\", data.questionId), {\n      userRate: data.userRate,\n      ratesCount: data.ratesCount,\n      ratesSum: data.ratesSum,\n    });\n    dispatch(getRating(data.id));\n  }\n);\n\nexport const Slice = createSlice({\n  name: \"Ratings\",\n  initialState: {\n    questionId: \"\",\n    userRate: [],\n    ratesCount: 0,\n    ratesSum: 0,\n  },\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(addRating.fulfilled, (state, action) => {\n        state.questionId = action.payload.questionId;\n        state.userRate = action.payload.userRate;\n        state.ratesCount = action.payload.ratesCount;\n        state.ratesSum = action.payload.ratesSum;\n      })\n      .addCase(getRating.fulfilled, (state, action) => {\n        state.questionId = action.payload.questionId;\n        state.userRate = action.payload.userRate;\n        state.ratesCount = action.payload.ratesCount;\n        state.ratesSum = action.payload.ratesSum;\n      });\n  },\n});\n\nexport default Slice.reducer;\n","C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\components\\Home.js",[],[],"C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\components\\quiz\\Play.js",["126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148"],[],"import { connect } from \"react-redux\";\nimport { mapStateToProps, mapDispatchToProps } from \"../../store\";\nimport { playSound, sounds } from \"../../utils/sounds\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport classnames from \"classnames\";\nimport CircularProgressWithLabel from \"./Percentage\";\n\nimport Stack from \"@mui/material/Stack\";\nimport {\n  Box,\n  Button,\n  ButtonBase,\n  CircularProgress,\n  Typography,\n} from \"@mui/material\";\nimport LinearProgress from \"@mui/material/LinearProgress\";\nimport { useEffect, useState } from \"react\";\nimport { RatingStars } from \"./RateStars\";\n\nimport { loadQuestions, loadSortedQuestion } from \"../../utils/questions\";\nimport Resaerch from \"./Research\";\n\nconst questionTime = 120; // 2 minutes\nconst categoriesData = [];\n\nfunction shuffleArrayInChunks(arr, chunkSize) {\n  for (let i = 0; i < arr.length; i += chunkSize) {\n    // Get the subarray of `chunkSize` elements from the current position\n    const chunk = arr.slice(i, i + chunkSize);\n    // Shuffle the elements in the chunk\n    shuffle(chunk);\n    // Replace the original elements with the shuffled elements\n    arr.splice(i, chunkSize, ...chunk);\n  }\n}\n\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\n\nfunction RateModal({ onSubmit }) {\n  return (\n    <Stack className={classnames(\"rate-modal\")}>\n      <Stack className=\"rate-modal-blur\" />\n      <Stack className=\"modal\">\n        <Typography variant=\"h4\">Question review</Typography>\n        <RatingStars onSubmit={onSubmit} />\n      </Stack>\n    </Stack>\n  );\n}\n\nfunction Timer({ totalSeconds, onEnd }) {\n  const [count, setCount] = useState(totalSeconds);\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setCount(count - 1);\n      if (count <= 0) {\n        clearInterval(intervalId);\n        onEnd();\n      }\n    }, 1000);\n    return () => clearInterval(intervalId);\n  }, [count, totalSeconds, onEnd]);\n\n  const minutes = Math.floor(count / 60);\n  const seconds = count % 60;\n\n  return (\n    <Stack direction=\"row\" className=\"timer\">\n      <Typography>\n        {minutes}:{seconds.toString().padStart(2, \"0\")}\n      </Typography>\n      <span className=\"mdi mdi-clock-outline mdi-24px\" />\n    </Stack>\n  );\n}\n\nfunction Play(props) {\n  const navigate = useNavigate();\n  const urlSplit = window.location.href.split(\"/\");\n  const questionSet = urlSplit[urlSplit.length - 1];\n\n  const [counter, setCounter] = useState(0);\n  const [userRateCount, setUserCount] = useState(0);\n  const [globalRateCounter, setGlobalCounter] = useState(0);\n  const [questions, setQuestions] = useState([]);\n  const [question, setQuestion] = useState(null);\n  const [rating, setRating] = useState({});\n\n  const [questionIdx, setQuestionIdx] = useState(0);\n  const [showRateModal, setShowRateModal] = useState(false);\n  const [HideIndexes, setHideIndexes] = useState([]);\n  const [timerSeconds, setTImerSeconds] = useState(questionTime);\n  const [showResearch, setShowResearch] = useState(false);\n  const [stats, setStats] = useState({\n    numberOfQuestions: 0,\n    numberOfAnsweredQuestions: 0,\n    correctAnswers: 0,\n    wrongAnswers: 0,\n    fiftyFiftyUsed: 0,\n    userRate: [],\n    globalRate: [],\n    hintsUsed: 0,\n  });\n\n  function QuizName() {\n    const urlSplit = window.location.href.split(\"/\");\n    const questionSet = urlSplit[urlSplit.length - 1];\n    switch (questionSet) {\n      case \"Python\":\n        return \"Python\";\n        break;\n      case \"Data\":\n        return \"Data Structure \";\n        break;\n      case \"OOP\":\n        return \"OOP\";\n        break;\n      case \"Operation\":\n        return \"Operation Systems\";\n        break;\n      case \"Linux\":\n        return \"Linux\";\n        break;\n      case \"General\":\n        return \"General Questions\";\n        break;\n        return \"Quiz\";\n    }\n  }\n\n  // const question = questions[questionIdx]\n  const [loading, setLoading] = useState(true);\n\n  async function loadRating() {\n    if (!question) return;\n    const res = await props.getRating(question.id);\n    const payload = res.payload;\n    setRating(payload ?? null);\n    setLoading(false);\n  }\n  // The function checks if a research question should be presented to the user\n  function countUserRate(ratePrecent, globalRate) {\n    setCounter((counter) => counter + 1);\n    setUserCount((userRateCount) => userRateCount + ratePrecent);\n    setGlobalCounter((globalRateCounter) => globalRateCounter + globalRate);\n\n    //After 3 questions a check is made if the user rated the questions lower than their overall rating\n    if (counter == 2) {\n      setCounter((counter) => 0);\n      if (userRateCount < globalRateCounter) {\n        console.log(`need return true`, globalRateCounter - userRateCount);\n        setUserCount((userRateCount) => 0);\n        setGlobalCounter((globalRateCounter) => 0);\n        return true;\n      }\n    }\n    return false;\n  }\n  async function onRate(rate) {\n    const userRate = [...props.rate.userRate] ?? [];\n    userRate.push({\n      rate: rate,\n      userEmail: props.user.email,\n    });\n    const ratesCount = props.rate.ratesCount;\n    const ratesSum = props.rate.ratesSum;\n    console.log(`rate =>`, rate);\n    console.log(\"ratesCount =>\", ratesCount);\n    console.log(\"ratesSum =>\", ratesSum);\n    console.log(`newRatesCount: ${ratesCount ? ratesCount + 1 : 1}`);\n\n    const newRate = {\n      questionId: question.id,\n      userRate: userRate,\n      ratesCount: ratesCount ? ratesCount + 1 : 1,\n      ratesSum: ratesSum ? ratesSum + rate : rate,\n    };\n    console.log(\"newRate => \", newRate);\n\n    // Check motivation\n    const ratePercent = (rate / 5) * 100;\n    stats.userRate.push(ratePercent);\n    const globalRatePercent =\n      (props.rate.ratesSum / (props.rate.ratesCount * 5)) * 100;\n    stats.globalRate.push(globalRatePercent);\n\n    setTimeout(() => {\n      // RateStars has some bug that prepregate the event so it fix it\n      setShowRateModal(false);\n    }, 100);\n\n    //if (ratePercent && globalRatePercent && ratePercent < globalRatePercent) {\n    if (countUserRate(ratePercent, globalRatePercent)) {\n      setShowResearch(true);\n    }\n    if (ratesCount !== null && ratesSum) {\n      // update\n      const res = await props.updateRating(newRate);\n    } else {\n      // create\n      const res = await props.addRating(newRate);\n    }\n  }\n\n  async function loadSortedQuestions() {\n    const questions = loadQuestions(questionSet);\n    const ratings = await Promise.all(\n      questions.map(async (q) => {\n        const id = q.id;\n        const res = await props.getRating(id);\n        const payload = res.payload;\n        const ratesCount = payload?.ratesCount || 0;\n        const ratesSum = payload?.ratesSum || 0;\n\n        const ratePercent =\n          ratesSum <= 0 ? 0 : (ratesSum / (ratesCount * 5)) * 100;\n        return { ratePercent: ratePercent, id: id };\n      })\n    );\n    questions.sort((a, b) => {\n      const ratingA = ratings.find((r) => r.id === a.id)?.ratePercent || 0;\n      const ratingB = ratings.find((r) => r.id === b.id)?.ratePercent || 0;\n      return ratingB - ratingA;\n    });\n    shuffleArrayInChunks(questions, 10);\n    return questions;\n  }\n\n  async function init() {\n    const data = JSON.parse(localStorage.getItem(\"user\"));\n    props.getUser(data);\n    const questions = await loadSortedQuestions();\n    setStats((prev) => ({ ...prev, numberOfQuestions: questions.length }));\n    setQuestions(questions);\n    setQuestion(questions[questionIdx]);\n    setLoading(false);\n    console.log(`questions =>`, questions);\n  }\n  useEffect(() => {\n    init();\n  }, []);\n\n  useEffect(() => {\n    console.log(\"stats => \", stats);\n    loadRating();\n    setHideIndexes([]);\n  }, [questionIdx]);\n\n  function onAnswer(result) {\n    if (result) {\n      // Correct\n      setStats((prev) => ({\n        ...prev,\n        correctAnswers: prev.correctAnswers + 1,\n      }));\n      playSound(sounds.correctNotification);\n      toast.success(\"Correct!\", { autoClose: 350, pauseOnHover: false });\n    } else {\n      // wrong\n      setStats((prev) => ({ ...prev, wrongAnswers: prev.wrongAnswers + 1 }));\n      playSound(sounds.wrongNotification);\n      toast.error(\"Wrong answer\", { autoClose: 350, pauseOnHover: false });\n    }\n\n    setStats((prev) => ({\n      ...prev,\n      numberOfAnsweredQuestions: prev.numberOfAnsweredQuestions + 1,\n    }));\n\n    if (questions.length > 0 && questionIdx + 1 >= questions.length) {\n      // end game\n      endGame({\n        ...stats,\n        numberOfAnsweredQuestions: stats.numberOfAnsweredQuestions + 1,\n      });\n      return;\n    }\n    setQuestionIdx(questionIdx + 1);\n    setQuestion(questions[questionIdx + 1]);\n    props.getRating(question.id);\n    setShowRateModal(true);\n  }\n\n  function endGame(stats) {\n    navigate(\"/play/quizSummary\", {\n      //state: { ...stats, category: questionSet },\n      state: { ...stats, category: QuizName()  },\n    });\n  }\n\n  useEffect(() => {\n    // check scores\n    // if (questions.length > 0 && (questionIdx + 1 >= questions.length)) { // end\n    //     endGame()\n    // }\n  }, [stats]);\n\n  function onPrev() {\n    playSound(sounds.buttonSound);\n    setQuestionIdx(questionIdx - 1);\n    setQuestion(questions[questionIdx - 1]);\n  }\n  function onNext() {\n    playSound(sounds.buttonSound);\n    setQuestionIdx(questionIdx + 1);\n    setQuestion(questions[questionIdx + 1]);\n  }\n\n  function onQuit() {\n    playSound(sounds.buttonSound);\n    endGame(stats);\n  }\n\n  function calcScore() {\n    return parseInt((stats.correctAnswers / stats.numberOfQuestions) * 100);\n  }\n\n  function enableHint(n) {\n    const answer = questions[questionIdx].answer;\n    const answerIdx = questions.findIndex((q) => q.answer === answer);\n    const wrongIdxs = [\"A\", \"B\", \"C\", \"D\"]\n      .map((c, i) => {\n        const option = question[`option${c}`];\n        return option && answer !== option ? i : -1;\n      })\n      .filter((i) => i > -1);\n    setHideIndexes(wrongIdxs.slice(0, n));\n  }\n\n  console.log(\"props.rate => \", props.rate);\n\n  if (loading) {\n    return (\n      <>\n        <Stack\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          sx={{\n            width: \"100vw\",\n            height: \"100vh\",\n            background: \"none\",\n            position: \"absolute\",\n          }}\n        >\n          <CircularProgress size=\"5em\" sx={{ color: \"#54b5df\" }} />\n        </Stack>\n\n        <Stack className={classnames(\"bg-blur\")}></Stack>\n      </>\n    );\n  }\n\n  return (\n    <>\n      {showRateModal && <RateModal onSubmit={onRate} />}\n      {showResearch && <Resaerch onFinish={() => setShowResearch(false)} />}\n      <Stack className={classnames(\"bg-blur\")} />\n      <Stack className={classnames(\"play\")}>\n        <ToastContainer />\n        <Stack className={classnames(\"game\")}>\n          <Typography\n            className={classnames(\"title\")}\n            variant=\"h3\"\n            textAlign=\"center\"\n          >\n            {QuizName()}\n          </Typography>\n\n          <Stack direction=\"row\" className={classnames(\"hints\")}>\n            <ButtonBase\n              onClick={() => {\n                setStats((prev) => ({\n                  ...prev,\n                  hintsUsed: prev.hintsUsed + 1,\n                }));\n                enableHint(1);\n              }}\n              className=\"mdi mdi-lightbulb-on-outline mdi-24px lifeline-icon\"\n              component=\"span\"\n            />\n            <Stack direction=\"column\" className={classnames(\"info\")}>\n              <Typography>\n                {questionIdx + 1} of {questions.length}\n              </Typography>\n              <div style={{ width: \"100%\", height: \"100px\" }}>\n                <LinearProgress\n                  variant=\"determinate\"\n                  value={((questionIdx + 1) / questions.length) * 100}\n                  style={{ height: \"10px\", width: \"250px\", margin: \"auto\" }}\n                />\n              </div>\n              <Typography variant=\"h6\">Score: {calcScore()}</Typography>\n              <CircularProgressWithLabel value={calcScore()} />\n              {/* <Timer onEnd={() => { }} totalSeconds={timerSeconds} /> */}\n            </Stack>\n            <ButtonBase\n              onClick={() => {\n                setStats((prev) => ({\n                  ...prev,\n                  fiftyFiftyUsed: prev.fiftyFiftyUsed + 1,\n                }));\n                enableHint(2);\n              }}\n              className=\"mdi mdi-set-center mdi-24px lifeline-icon\"\n              component=\"span\"\n            />\n          </Stack>\n          <Typography variant=\"h6\" className={classnames(\"question\")}>\n            {question.question}\n          </Typography>\n          <div className=\"answers-container\">\n            <div className={classnames(\"answers\")}>\n              {[\"A\", \"B\", \"C\", \"D\"].map((c, i) => {\n                if (HideIndexes.includes(i)) return;\n                const option = question[`option${c}`];\n                if (!option) return; // don't render\n                return (\n                  <Stack key={c} className={classnames(\"answer\")}>\n                    <ButtonBase\n                      onClick={() => {\n                        onAnswer(option === question.answer);\n                      }}\n                      className={classnames(\"answer-content\")}\n                    >\n                      <Typography className={classnames(\"answer-text\")}>\n                        {option}\n                      </Typography>\n                    </ButtonBase>\n                  </Stack>\n                );\n              })}\n            </div>\n          </div>\n          <Stack direction=\"row\" className={classnames(\"controls\")}>\n            <Button\n              sx={{\n                \"&.MuiButton-contained.Mui-disabled\": {\n                  background: \"gray\",\n                  opacity: 0.5,\n                },\n              }}\n              onClick={onPrev}\n              disabled={questionIdx === 0}\n              className={classnames(\"prev-btn\")}\n              variant=\"contained\"\n            >\n              Previous\n            </Button>\n            <Button\n              sx={{\n                \"&.MuiButton-contained.Mui-disabled\": {\n                  background: \"gray\",\n                  opacity: 0.5,\n                },\n              }}\n              onClick={onNext}\n              disabled={questionIdx === questions.length - 1}\n              variant=\"contained\"\n            >\n              Next\n            </Button>\n            <Button onClick={onQuit} variant=\"contained\">\n              Quit\n            </Button>\n          </Stack>\n        </Stack>\n      </Stack>\n    </>\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Play);\n","C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\components\\quiz\\Research.js",["149","150","151","152","153","154","155"],[],"import wolf from '../../assets/research/wolf.json';\nimport React, { useState } from 'react';\nimport FormControl from '@mui/material/FormControl';\nimport FormLabel from '@mui/material/FormLabel';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Radio from '@mui/material/Radio';\nimport ButtonBase from '@mui/material/ButtonBase';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport Stack from '@mui/material/Stack';\nimport classnames from 'classnames';\nimport { useNavigate } from 'react-router-dom';\nimport Play from './Play';\n\n\nconst totalQuestion = wolf.categories.length // one from each\n\n\n\nconst colors = [\n  \"#ff0000\", \"#ff4000\", \"#ff8000\", \"#ffbf00\", \"#ffff00\", \"#bfff00\", \"#80ff00\"\n]\n\n\nfunction AnswerButton({ answer, answerValue, onClick, sx }) {\n  return (\n    <ButtonBase onClick={onClick} value={answerValue} sx={sx} className={classnames(\"answer-button\")}>\n      <Typography fontWeight=\"bold\" color=\"white\">{answer}</Typography>\n    </ButtonBase>\n  )\n}\n\n\nfunction WolfForm({ onFinish }) {\n  const [questionIdx, setQuestionIdx] = useState(Math.floor(Math.random(4)))\n  const [result, setResult] = useState({})\n  const [categoryIdx, setCategoryIdx] = useState(0)\n  const [answeredCount, setAnsweredCount] = useState(1)\n\n\n\n  const question = wolf.categories[categoryIdx].questions[questionIdx]\n  const answers = wolf.answers\n\n\n  const calcMotive = (result) => {\n\n    const absorption = result.absorption / wolf.answers.length\n    const workEnjoyment = result.work_enjoyment / wolf.answers.length\n    const intrinisic = result.intrinisic_motivation / wolf.answers.length\n\n    return {\n      absorption: absorption * 100,\n      workEnjoyment: workEnjoyment * 100,\n      intrinisic: intrinisic * 100\n    }\n  }\n\n  const hasMotive = (calcResult) => {\n    return (\n      calcResult.absorption >= 18.7 &&\n      calcResult.workEnjoyment >= 28.3 &&\n      calcResult.intrinisic >= 20.9\n    )\n  }\n\n  const onAnswerClick = (e) => {\n    const answeredValue = parseInt(e.currentTarget.value)\n    const newResult = { ...result }\n    const category = wolf.categories[categoryIdx]\n\n    if (newResult.hasOwnProperty(category.name)) { // update\n      newResult[category.name] += answeredValue \n    } else { // create\n      newResult[category.name] = answeredValue\n    }\n    setResult(newResult)\n\n    if (categoryIdx >= wolf.categories.length - 1) {\n      const calcResult = calcMotive(newResult)\n      onFinish({ answeres: result, hasMotive: hasMotive(calcResult), result: calcResult })\n      return;\n    } else {\n      setCategoryIdx(categoryIdx + 1) // Next category\n      const nextRandom = Math.floor(Math.random() * wolf.categories[categoryIdx].questions.length)\n      setQuestionIdx(\n        nextRandom\n      ) // first question\n      setAnsweredCount(answeredCount + 1)\n    }\n  }\n\n  return (\n    <>\n      <Stack className={classnames('questions-container')}>\n        <Typography sx={{ opacity: 1 }} color=\"#bdc1c6\" variant='h4'>\n          Question {answeredCount}/<span style={{ fontSize: \"0.6em\" }}>{totalQuestion}</span>\n        </Typography>\n        <Typography color=\"white\" marginTop=\"25px\" variant='h6'>\n          {question}\n        </Typography>\n      </Stack>\n      <Stack className={classnames('answers-container')}>\n        {\n          answers.map((answer, index) => (\n            <AnswerButton answerValue={index} key={answer} onClick={onAnswerClick} answer={answer} sx={{ border: `3px solid ${colors[index]}` }} />\n          ))\n        }\n      </Stack>\n    </>\n  )\n}\n\n\nfunction LackMotive({ changeCategory, continueQuiz }) {\n  return (\n    <Stack sx={{\n      width: \"100%\",\n      height: \"100%\",\n      // justifyContent: \"center\",\n      // alignItems: \"center\"\n\n    }}>\n      <Typography paddingTop=\"20px\" variant='h5' color=\"white\" textAlign=\"center\">A lack of motivation was detected by the system,</Typography>\n      <Typography paddingTop=\"20px\" variant='h5' color=\"white\" textAlign=\"center\"> You have the option to change the category.</Typography>\n      <Stack sx={{ gap: \"20px\", alignItems: \"center\", marginTop: \"40px\" }}>\n        <AnswerButton\n          answer=\"Change Category\"\n          sx={{ border: \"2px solid #80ff00\", width: \"40%\" }}\n          onClick={() => {\n\n            changeCategory()\n          }}\n        >\n        </AnswerButton>\n        <AnswerButton answer=\"Continue\"\n          onClick={() => {\n            continueQuiz()\n          }}\n          sx={{ border: \"2px solid #ffbf00\", width: \"40%\" }}>Continue</AnswerButton>\n\n      </Stack>\n    </Stack>\n  )\n}\n\n\nfunction Resaerch({ onFinish }) {\n  const [LackofMotive, setLackofMotive] = useState(false)\n  const navigate = useNavigate()\n\n  const onFormFinish = (result) => {\n    if (!result.hasMotive) {\n      setLackofMotive(true)\n    } else {\n      onFinish()\n    }\n\n  }\n\n\n  return (\n    <Stack className={classnames(\"research-container\")}>\n      <Typography sx={{ textShadow: \"1px 1px 2px #000000\" }} textAlign=\"center\" marginTop=\"40px\" variant=\"h2\" color=\"white\"> Wolf Research</Typography>\n      \n      <Stack justifyContent=\"center\" alignItems=\"center\" sx={{ width: \"100%\", height: \"70%\" }}>\n        <Stack flexDirection=\"row\" className={classnames('question-container')}>\n          {\n            LackofMotive ?\n              <LackMotive continueQuiz={() => onFinish({ hashMotive: true })} changeCategory={() => {\n                navigate(\"/play/category\")\n              }} />\n              :\n              <WolfForm onFinish={onFormFinish} />\n          }\n\n        </Stack>\n      </Stack>\n    </Stack>\n  )\n\n}\nexport default Resaerch;","C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\components\\quiz\\QuizSummary.js",["156","157"],[],"import React, { Component, Fragment, useEffect, useState } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport ChartComponent from \"./ChartComponent\";\nimport LineComponent from \"./LineComponent\";\nimport { addHistory } from \"../../features/history\";\nimport { connect } from \"react-redux\";\nimport { mapStateToProps, mapDispatchToProps } from \"../../store\";\n\nfunction QuizSummary(props) {\n  console.log(\"props\", props);\n\n  const location = useLocation();\n  const userId = props.user.id;\n  console.log(\"userId => \", userId);\n  const [state, setState] = useState({\n    score: 0,\n    numberOfQuestions: 0,\n    numberOfAnsweredQuestions: 0,\n    correctAnswers: 0,\n    wrongAnswers: 0,\n    hintsUsed: 0,\n    userRate: [],\n    fiftyFiftyUsed: 0,\n  });\n\n  useEffect(() => {\n    const { state } = location;\n    if (state) {\n      const score = (state.correctAnswers / state.numberOfQuestions) * 100;\n      setState({\n        score: score,\n        numberOfQuestions: state.numberOfQuestions,\n        numberOfAnsweredQuestions: state.numberOfAnsweredQuestions,\n        correctAnswers: state.correctAnswers,\n        wrongAnswers: state.wrongAnswers,\n        hintsUsed: state.hintsUsed,\n        userRate: state.userRate,\n        fiftyFiftyUsed: state.fiftyFiftyUsed,\n      });\n\n      if (userId) {\n        addHistory(\n          userId,\n          new Date(),\n          state.category ?? \"unknown\",\n          score,\n          state.correctAnswers,\n          state.wrongAnswers,\n          state.userRate,\n          state.globalRate,\n          state.fiftyFiftyUsed,\n          state.hintsUsed\n        );\n      }\n    }\n  }, []);\n  console.log(`userRate check`, state.userRate);\n\n  let stats, remark;\n  const userScore = state.score;\n\n  if (userScore <= 30) {\n    remark = \"You need more practice!\";\n  } else if (userScore > 30 && userScore <= 50) {\n    remark = \"Better luck next time!\";\n  } else if (userScore <= 70 && userScore > 50) {\n    remark = \"You can do better!\";\n  } else if (userScore >= 71 && userScore <= 84) {\n    remark = \"You did great!\";\n  } else {\n    remark = \"You're an absolute genius!\";\n  }\n\n  if (state !== undefined) {\n    stats = (\n      <Fragment>\n        <div style={{ textAlign: \"center\" }}>\n          <span className=\"mdi mdi-check-circle-outline success-icon\"></span>\n        </div>\n        <h1>Quiz has ended</h1>\n        <div className=\"container stats\">\n          <h2>{remark}</h2>\n          <h2>Your Score: {state.score.toFixed(0)}&#37;</h2>\n          <ChartComponent />\n          <LineComponent />\n\n          <span className=\"stat left\">Total number of questions: </span>\n          <span className=\"right\">{state.numberOfQuestions}</span>\n          <br />\n\n          <span className=\"stat left\">Number of attempted questions: </span>\n          <span className=\"right\">{state.numberOfAnsweredQuestions}</span>\n          <br />\n          <span className=\"stat left\">Hints Used: </span>\n          <span className=\"right\">{state.hintsUsed}</span>\n          <br />\n\n          <span className=\"stat left\">50-50 Used: </span>\n          <span className=\"right\">{state.fiftyFiftyUsed}</span>\n        </div>\n        <section>\n          <ul>\n            <li>\n              <Link to=\"/play/category\">Play Again</Link>\n            </li>\n            <li>\n              <Link to=\"/play/history\">Game History</Link>\n            </li>\n            <li>\n              <Link to=\"/\">Back to Home</Link>\n            </li>\n          </ul>\n        </section>\n      </Fragment>\n    );\n  } else {\n    stats = (\n      <section>\n        <h1 className=\"no-stats\">No Statistics Available</h1>\n        <ul>\n          <li>\n            <Link to=\"/play/quiz\">Take a Quiz</Link>\n          </li>\n          <li>\n            <Link to=\"/\">Back to Home</Link>\n          </li>\n        </ul>\n      </section>\n    );\n  }\n  return (\n    <Fragment>\n      <Helmet>\n        <title>Quiz App - Summary</title>\n      </Helmet>\n      <div className=\"bg-blur\" />\n      <div className=\"quiz-summary\">{stats}</div>\n    </Fragment>\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuizSummary);\n","C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\components\\quiz\\Category.js",["158","159","160"],[],"import React, { Fragment } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport { mapStateToProps, mapDispatchToProps } from \"../../store\";\nimport { connect } from \"react-redux\";\n\nconst Category = () => {\n  const navigate = useNavigate();\n\n  const handleClick = (event) => {\n    const category = event.target.textContent;\n    switch (category) {\n      case 'Python':\n        navigate(\"/play/Python\");\n        break;\n      case 'Data Structure':\n        navigate(\"/play/Data\");\n        break;\n      case 'OOP':\n        navigate(\"/play/OOP\");\n        break;\n      case 'Operation Systems':\n        navigate(\"/play/Operation\");\n        break;\n      case 'Linux':\n        navigate(\"/play/Linux\");\n        break;\n      case 'General Questions':\n        navigate(\"/play/General\");\n        break;\n\n\n\n    }\n  };\n\n  const historyClick = () => {\n\n    navigate(\"/play/history\");\n\n  }\n  return (\n    <>\n      <div id=\"category\">\n        <div className=\"bg-blur\" />\n        <div className=\"container\">\n          <h3 className=\"title roboto\">\n            Select a category you'd like to test your knowledge on!\n          </h3>\n          <div className=\"grid\">\n            <button className=\"button\" onClick={handleClick}>\n              Python\n            </button>\n            <button className=\"button\" onClick={handleClick}>\n              Data Structure\n            </button>\n            <button className=\"button\" onClick={handleClick}>\n              OOP\n            </button>\n            <button className=\"button\" onClick={handleClick}>\n              Operation Systems\n            </button>\n            <button className=\"button\" onClick={handleClick}>\n              Linux\n            </button>\n            <button className=\"button\" onClick={handleClick}>\n              General Questions\n            </button>\n          </div>\n\n\n          \n         <div className='center' >\n         <button  className=\"button\" onClick={historyClick}>\n            Game History\n          </button>\n\n         </div>\n        </div>\n      </div>\n\n    </>\n\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Category);\n","C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\components\\quiz\\QuizHistory.js",["161"],[],"import { useState,useMemo } from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Paper from \"@mui/material/Paper\";\nimport moment from \"moment/moment\";\nimport CircularProgressWithLabel from \"./Percentage\";\nimport { CircularProgress } from \"@mui/material\";\nimport { Link } from \"react-router-dom\";\nimport classNames from \"classnames\";\nimport { mapStateToProps, mapDispatchToProps } from \"../../store\";\nimport { connect } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { getHistory, addHistory } from \"../../features/history\";\n\nfunction QuizHistory(props) {\n  const userId = props.user.id;\n  const email = props.user.email;\n  const [loading, setLoading] = useState(true);\n  const [rows, setRows] = useState([]);\n  \n\n  useEffect(() => {\n    async function getData() {\n      const rowsRes = await getHistory(userId);\n      setRows(rowsRes);\n      setLoading(false);\n    }\n    getData();\n  }, [userId]);\n\n  const sortedRows = useMemo(() => {\n    return [...rows].sort((a, b) => {\n      const aDate = moment(a.date.toDate());\n      const bDate = moment(b.date.toDate());\n      return bDate.diff(aDate);\n    });\n  }, [rows]);\n\n  // const rows = [\n  //   {\n  //     date: new Date(),\n  //     category: \"Python\",\n  //     score: 67,\n  //     correct_count: 5,\n  //     incorrect_count: 2,\n  //     hints_used: 0,\n  //     hints_50_used: 0,\n  //   },\n  // ];\n\n  // const sortedRows = rows.sort((a, b) => a.date.getTime() - b.date.getTime()); // sort by date\n\n  return (\n    <>\n      <div className=\"bg-blur\" />\n      <h1 className=\"title\">MY HISTORY</h1>\n\n      <TableContainer\n        component={Paper}\n        className={classNames(\"table-container\")}\n      >\n        <span>Game history of {email}</span>\n        <Table sx={{ minWidth: 650 }} className=\"table\">\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\">Time</TableCell>\n              <TableCell align=\"center\">Category</TableCell>\n              <TableCell align=\"center\">Score</TableCell>\n              <TableCell align=\"center\">Correct</TableCell>\n              <TableCell align=\"center\">Incorrect</TableCell>\n              <TableCell align=\"center\">Hints</TableCell>\n              <TableCell align=\"center\">Fifty hints</TableCell>\n            </TableRow>\n          </TableHead>\n          {loading ? (\n            <CircularProgress className=\"table-loading\" />\n          ) : (\n            <TableBody>\n              {sortedRows.map((row) => (\n                <TableRow\n                  key={row.name}\n                  sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n                >\n                  <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                    {moment(new Date(row.date.toDate())).calendar()}\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    <span className=\"col-category\">{row.category} </span>\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    <CircularProgressWithLabel value={(row.correctCount/(row.correctCount + row.wrongCount))*100} />\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    <span className=\"correct-count\">{row.correctCount}</span>\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    <span className=\"wrong-count\">{row.wrongCount}</span>\n                  </TableCell>\n                  <TableCell align=\"center\">{row.hintsCount}</TableCell>\n                  <TableCell align=\"center\">{row.hints50Count}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          )}\n        </Table>\n      </TableContainer>\n      <ul className=\"links\">\n        <Link to=\"/\">Back to Home</Link>\n        <Link to=\"/play/category\">Categories</Link>\n      </ul>\n    </>\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuizHistory);\n","C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\components\\quiz\\LineComponent.js",["162","163","164","165","166"],[],"import React, { Component, Fragment, useEffect, useState } from 'react';\nimport Chart  from \"react-apexcharts\";\nimport { Helmet } from 'react-helmet';\nimport { Link, useLocation } from 'react-router-dom';\n\n\nfunction LineComponent() {\n    const location = useLocation()\n    const [state, setState] = useState({\n      score: 0,\n      numberOfQuestions: 0,\n      numberOfAnsweredQuestions: 0,\n      correctAnswers: 0,\n      wrongAnswers: 0,\n      hintsUsed: 0,\n      userRate: [],\n      globalRate: [],\n      fiftyFiftyUsed: 0\n    });\n  \n    useEffect(() => {\n      const { state } = location\n      if (state) {\n        setState({\n          score: state.correctAnswers / state.numberOfQuestions * 100,\n          numberOfQuestions: state.numberOfQuestions,\n          numberOfAnsweredQuestions: state.numberOfAnsweredQuestions,\n          correctAnswers: state.correctAnswers,\n          wrongAnswers: state.wrongAnswers,\n          hintsUsed: state.hintsUsed,\n          userRate: state.userRate,\n          globalRate: state.globalRate,\n          fiftyFiftyUsed: state.fiftyFiftyUsed\n        });\n      }\n    }, [])\n  const userArr = state.userRate.map(num => Math.round(num / 10) * 10);\n  const globalArr = state.globalRate.map(num => Math.round(num / 10) * 10);\n  const createLine ={\n    options: {\n        colors: [\"#E91E63\", \"#FF9800\"],\n        chart: {\n          id: \"basic-bar\",\n        },\n        xaxis: {\n          categories: [],\n          labels: {\n            show: false,\n          },\n        },\n      },\n      series: [\n        {\n          name: \"Users Rating\",\n          data:  globalArr,\n        },\n        {\n          name: \"Your Rating \",\n          data: userArr,\n        },\n        \n      ],\n    }\n  \n  return (\n    // <div className=\"App\">\n    //   <div className=\"row\">\n    //     <div className=\"col-4\">\n    //       <Chart\n    //         options={createLine.options}\n    //         series={createLine.series}\n    //         type=\"line\"\n    //         width=\"450\"\n    //       />\n    //     </div>  \n    //   </div>\n    // </div>\n    <div className=\"app\">\n        <div className=\"row\">\n          <div className=\"mixed-chart\">\n            <Chart\n              options={createLine.options}\n              series={createLine.series}\n              type=\"bar\"\n              // width=\"500\"\n              height={300}\n            />\n          </div>\n        </div>\n      </div>\n  );\n}\n\nexport default LineComponent;\n\n// bar\n// line\n// area\n// radar\n// histogram\n// scatter\n// heatmap","C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\components\\auth\\Login.js",["167","168"],[],"import React, { useState } from \"react\";\nimport { signInWithEmailAndPassword } from \"firebase/auth\";\nimport { auth } from \"../../firebase\";\nimport { NavLink, Redirect, useNavigate } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { getUser } from \"../../features/users\";\n\nconst Login = (props) => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState({});\n  const navigate = useNavigate()\n\n  const dispatch = useDispatch();\n  const onLogin = (e) => {\n    e.preventDefault();\n    signInWithEmailAndPassword(auth, email, password)\n      .then((userCredential) => {\n        // Signed in\n        const user = userCredential.user;\n        navigate(\"/\");\n        console.log(user);\n        dispatch(getUser(userCredential.user.uid));\n      })\n      .catch((err) => {\n        const errorCode = err.code;\n        const errorMessage = err.message;\n        if (errorMessage === \"Firebase: Error (auth/user-not-found).\") {\n          setError({ email: \"User not found\" });\n        } else if (errorMessage === \"Firebase: Error (auth/wrong-password).\") {\n          setError({ password: \"Wrong Password\" });\n        }\n        console.log(\"err => \", errorMessage);\n      });\n  };\n\n  const onBack = (e) => {\n    e.preventDefault()\n    navigate(\"/\")\n  }\n\n  return (\n    <main className=\"auth\">\n      <div className=\"bg-blur\" />\n      <section>\n        <div style={{ textAlign: \"center\" }}>\n          <span className=\"mdi mdi-cube-outline cube\"></span>\n        </div>\n        <div>\n          <h2>Login</h2>\n          <form onSubmit={onLogin}>\n            <div className=\"input-container\">\n              <input\n                className=\"input-form\"\n                id=\"email-address\"\n                name=\"email\"\n                type=\"email\"\n                required\n                placeholder=\"Email address\"\n                onChange={(e) => setEmail(e.target.value)}\n              />\n            </div>\n            {error.email ? <p className=\"error\">{error.email}</p> : null}\n\n            <div className=\"input-container\">\n              <input\n                className=\"input-form\"\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                required\n                placeholder=\"Password\"\n                onChange={(e) => setPassword(e.target.value)}\n              />\n            </div>\n            {error.password ? <p className=\"error\">{error.password}</p> : null}\n\n            <div className=\"submit\">\n              <button type=\"submit\" className=\"submit-button\">\n                Login\n              </button>\n            </div>\n          </form>\n\n          <p className=\"text-white text-center\">\n            No account yet? <NavLink to=\"/signup\">Sign up</NavLink>\n          </p>\n          <p className=\"back\" onClick={onBack}>\n            Back\n          </p>\n        </div>\n      </section>\n    </main>\n  );\n};\n\nexport default Login;\n","C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\components\\auth\\Signup.js",["169","170"],[],"import React, { useState } from \"react\";\nimport { NavLink, Redirect, useNavigate } from \"react-router-dom\";\nimport { createUserWithEmailAndPassword } from \"firebase/auth\";\nimport { auth } from \"../../firebase\";\nimport { addUser } from \"../../features/users\";\nimport { useDispatch } from \"react-redux\";\n\nconst Signup = (props) => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState({});\n  const navigate = useNavigate()\n\n  const dispatch = useDispatch();\n  const onSubmit = async (e) => {\n    e.preventDefault();\n\n    await createUserWithEmailAndPassword(auth, email, password)\n      .then((userCredential) => {\n        // Signed in\n        const user = userCredential.user;\n        console.log(user);\n        // Redirect(\"/login\")\n        navigate(\"/\");\n        localStorage.setItem('user', JSON.stringify({id:userCredential.user.uid, email: email, ids: []}))\n        // ...\n        dispatch(addUser({ email: email, uid: userCredential.user.uid }));\n      })\n      .catch((err) => {\n        const errorCode = err.code;\n        const errorMessage = err.message;\n        if (errorMessage === \"Firebase: Error (auth/email-already-in-use).\") {\n          setError({ email: \"This email is already exist\" });\n        } else if (\n          errorMessage ===\n          \"Firebase: Password should be at least 6 characters (auth/weak-password).\"\n        ) {\n          setError({ password: \"Password should be at least 6 characters\" });\n        }\n        console.log(errorMessage);\n        // ..\n      });\n  };\n\n  const onBack = (e) => {\n    e.preventDefault()\n    navigate(\"/\")\n  }\n\n  return (\n    <main className=\"auth\">\n      <div className=\"bg-blur\" />\n      <section>\n        <div style={{ textAlign: \"center\" }}>\n          <span className=\"mdi mdi-cube-outline cube\"></span>\n        </div>\n        <div>\n          <h1>Sign up</h1>\n          <form onSubmit={onSubmit}>\n            <div className=\"input-container\">\n              <input\n                className=\"input-form\"\n                type=\"email\"\n                label=\"Email address\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n                placeholder=\"Email address\"\n              />\n            </div>\n            {error.email ? <p className=\"error\">{error.email}</p> : null}\n\n            <div className=\"input-container\">\n              <input\n                className=\"input-form\"\n                type=\"password\"\n                label=\"Create password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n                placeholder=\"Password\"\n              />\n            </div>\n            {error.password ? <p className=\"error\">{error.password}</p> : null}\n\n            <div className=\"submit\">\n              <button type=\"submit\" className=\"submit-button\">\n                Sign up\n              </button>\n            </div>\n          </form>\n\n          <p className=\"text-white text-center\">\n            Already have an account? <NavLink to=\"/login\">Sign in</NavLink>\n          </p>\n          <p className=\"back\" onClick={onBack}>\n            Back\n          </p>\n        </div>\n      </section>\n    </main>\n  );\n};\n\nexport default Signup;\n","C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\features\\history.js",["171","172","173","174","175","176","177"],[],"import {\n  getDoc,\n  setDoc,\n  doc,\n  updateDoc,\n  addDoc,\n  orderBy,\n  query,\n  where,\n  getDocs,\n  collection,\n  CollectionReference,\n  arrayUnion,\n} from \"firebase/firestore\";\nimport { firestore } from \"../firebase\";\n\nexport const getHistory = async (userId) => {\n  try {\n    // Create a query to retrieve the history records for the specified user\n    const q = query(\n      collection(firestore, \"history\"),\n      where(\"userId\", \"==\", userId)\n    );\n\n    // Execute the query and get a snapshot of the results\n    const querySnapshot = await getDocs(q);\n\n    // Extract the data from each history record and return as an array\n    const history = querySnapshot.docs.map((doc) => doc.data());\n\n    return history;\n  } catch (error) {\n    console.error(\"Error getting history:\", error);\n  }\n};\n\nexport const addHistory = async (\n  userId,\n  date,\n  category,\n  score,\n  correctCount,\n  wrongCount,\n  userRate,\n  globalRate,\n  hints50Count,\n  hintsCount\n) => {\n  const data = {\n    userId,\n    date,\n    category,\n    score,\n    correctCount,\n    wrongCount,\n    userRate,\n    globalRate,\n    hints50Count,\n    hintsCount,\n  };\n\n  await addDoc(collection(firestore, \"history\"), data);\n};\n","C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\components\\quiz\\Percentage.js",[],[],"C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\components\\quiz\\ChartComponent.js",["178","179","180"],[],"import React, { Component, Fragment, useEffect, useState } from 'react';\nimport Chart  from \"react-apexcharts\";\nimport { Helmet } from 'react-helmet';\nimport { Link, useLocation } from 'react-router-dom';\n\n\nfunction ChartComponent() {\n  const location = useLocation()\n  const [state, setState] = useState({\n    score: 0,\n    numberOfQuestions: 0,\n    numberOfAnsweredQuestions: 0,\n    correctAnswers: 0,\n    wrongAnswers: 0,\n    hintsUsed: 0,\n    fiftyFiftyUsed: 0\n  });\n\n  useEffect(() => {\n    const { state } = location\n    if (state) {\n      setState({\n        score: state.correctAnswers / state.numberOfQuestions * 100,\n        numberOfQuestions: state.numberOfQuestions,\n        numberOfAnsweredQuestions: state.numberOfAnsweredQuestions,\n        correctAnswers: state.correctAnswers,\n        wrongAnswers: state.wrongAnswers,\n        hintsUsed: state.hintsUsed,\n        fiftyFiftyUsed: state.fiftyFiftyUsed\n      });\n    }\n  }, [])\n  console.log(state.correctAnswers)\n\n  const chartOptions = {\n    options: {},\n    series: [state.correctAnswers, state.wrongAnswers,state.hintsUsed + state.fiftyFiftyUsed],\n    chartOptions:{\n      labels: ['Correct', 'Incorrect', 'Assisted'],\n      colors: [\"#04FA1B\",\"#FA1A04\",\"#ECFF33\"]\n    }\n  }\n\n\n  return (\n    <Fragment>\n      <Helmet><title>Quiz App - Summary</title></Helmet>\n      {/* <div style={{ width: '50%', margin: 'auto' }}> */}\n        <div className=\"donut\">\n          <Chart options={chartOptions.chartOptions} series={chartOptions.series} type=\"donut\" height={250} />\n        </div>\n      {/* </div> */}\n    </Fragment>\n  );\n\n\n\n\n}\n\nexport default ChartComponent;","C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\components\\quiz\\RateStars.js",[],[],"C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\utils\\sounds.js",[],[],"C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\utils\\questions.js",[],[],"C:\\Users\\liranhaim\\Desktop\\MotoProg_H\\src\\firebase.js",["181"],[],"// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAuth } from \"firebase/auth\";\r\nimport { getFirestore } from \"firebase/firestore\";\r\n\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// Your web app's Firebase configuration\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBa6PCM0gxZ58tM4odhzD4S7i_Mq5Bwafk\",\r\n  authDomain: \"motoprog-dbbd6.firebaseapp.com\",\r\n  projectId: \"motoprog-dbbd6\",\r\n  storageBucket: \"motoprog-dbbd6.appspot.com\",\r\n  messagingSenderId: \"122581464911\",\r\n  appId: \"1:122581464911:web:67336793dbc2888613373a\"\r\n};\r\n \r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\n\r\n// Initialize Firebase Authentication and get a reference to the service\r\nexport const auth = getAuth(app);\r\nexport const firestore = getFirestore(app);\r\n\r\nexport const createUserDocument = async (user,additinalData) =>{\r\n  if (!user) return;\r\n  const userRef = firestore.doc(`users/${user.uid}`);\r\n  const snapshot = await userRef.get();\r\n\r\n  \r\n  \r\n};\r\nexport default app;",{"ruleId":"182","severity":1,"message":"183","line":5,"column":8,"nodeType":"184","messageId":"185","endLine":5,"endColumn":14},{"ruleId":"182","severity":1,"message":"186","line":13,"column":8,"nodeType":"184","messageId":"185","endLine":13,"endColumn":21},{"ruleId":"182","severity":1,"message":"187","line":7,"column":3,"nodeType":"184","messageId":"185","endLine":7,"endColumn":10},{"ruleId":"182","severity":1,"message":"188","line":8,"column":3,"nodeType":"184","messageId":"185","endLine":8,"endColumn":13},{"ruleId":"182","severity":1,"message":"189","line":9,"column":3,"nodeType":"184","messageId":"185","endLine":9,"endColumn":8},{"ruleId":"182","severity":1,"message":"190","line":5,"column":10,"nodeType":"184","messageId":"185","endLine":5,"endColumn":21},{"ruleId":"182","severity":1,"message":"191","line":11,"column":3,"nodeType":"184","messageId":"185","endLine":11,"endColumn":6},{"ruleId":"182","severity":1,"message":"192","line":21,"column":25,"nodeType":"184","messageId":"185","endLine":21,"endColumn":43},{"ruleId":"182","severity":1,"message":"193","line":25,"column":7,"nodeType":"184","messageId":"185","endLine":25,"endColumn":21},{"ruleId":"182","severity":1,"message":"194","line":57,"column":10,"nodeType":"184","messageId":"185","endLine":57,"endColumn":15},{"ruleId":"182","severity":1,"message":"195","line":93,"column":10,"nodeType":"184","messageId":"185","endLine":93,"endColumn":16},{"ruleId":"182","severity":1,"message":"196","line":98,"column":10,"nodeType":"184","messageId":"185","endLine":98,"endColumn":22},{"ruleId":"182","severity":1,"message":"197","line":98,"column":24,"nodeType":"184","messageId":"185","endLine":98,"endColumn":39},{"ruleId":"198","severity":1,"message":"199","line":114,"column":5,"nodeType":"200","messageId":"201","endLine":134,"endColumn":6},{"ruleId":"202","severity":1,"message":"203","line":117,"column":9,"nodeType":"204","messageId":"205","endLine":117,"endColumn":15},{"ruleId":"202","severity":1,"message":"203","line":120,"column":9,"nodeType":"204","messageId":"205","endLine":120,"endColumn":15},{"ruleId":"202","severity":1,"message":"203","line":123,"column":9,"nodeType":"204","messageId":"205","endLine":123,"endColumn":15},{"ruleId":"202","severity":1,"message":"203","line":126,"column":9,"nodeType":"204","messageId":"205","endLine":126,"endColumn":15},{"ruleId":"202","severity":1,"message":"203","line":129,"column":9,"nodeType":"204","messageId":"205","endLine":129,"endColumn":15},{"ruleId":"202","severity":1,"message":"203","line":132,"column":9,"nodeType":"204","messageId":"205","endLine":133,"endColumn":23},{"ruleId":"206","severity":1,"message":"207","line":154,"column":17,"nodeType":"208","messageId":"209","endLine":154,"endColumn":19},{"ruleId":"182","severity":1,"message":"210","line":204,"column":13,"nodeType":"184","messageId":"185","endLine":204,"endColumn":16},{"ruleId":"182","severity":1,"message":"210","line":207,"column":13,"nodeType":"184","messageId":"185","endLine":207,"endColumn":16},{"ruleId":"211","severity":1,"message":"212","line":247,"column":6,"nodeType":"213","endLine":247,"endColumn":8,"suggestions":"214"},{"ruleId":"211","severity":1,"message":"215","line":253,"column":6,"nodeType":"213","endLine":253,"endColumn":19,"suggestions":"216"},{"ruleId":"182","severity":1,"message":"217","line":326,"column":11,"nodeType":"184","messageId":"185","endLine":326,"endColumn":20},{"ruleId":"218","severity":1,"message":"219","line":420,"column":46,"nodeType":"220","messageId":"221","endLine":420,"endColumn":53},{"ruleId":"218","severity":1,"message":"219","line":422,"column":30,"nodeType":"220","messageId":"221","endLine":422,"endColumn":37},{"ruleId":"182","severity":1,"message":"222","line":3,"column":8,"nodeType":"184","messageId":"185","endLine":3,"endColumn":19},{"ruleId":"182","severity":1,"message":"223","line":4,"column":8,"nodeType":"184","messageId":"185","endLine":4,"endColumn":17},{"ruleId":"182","severity":1,"message":"224","line":5,"column":8,"nodeType":"184","messageId":"185","endLine":5,"endColumn":18},{"ruleId":"182","severity":1,"message":"225","line":6,"column":8,"nodeType":"184","messageId":"185","endLine":6,"endColumn":24},{"ruleId":"182","severity":1,"message":"226","line":7,"column":8,"nodeType":"184","messageId":"185","endLine":7,"endColumn":13},{"ruleId":"182","severity":1,"message":"227","line":9,"column":8,"nodeType":"184","messageId":"185","endLine":9,"endColumn":14},{"ruleId":"182","severity":1,"message":"228","line":14,"column":8,"nodeType":"184","messageId":"185","endLine":14,"endColumn":12},{"ruleId":"182","severity":1,"message":"229","line":1,"column":17,"nodeType":"184","messageId":"185","endLine":1,"endColumn":26},{"ruleId":"211","severity":1,"message":"230","line":57,"column":6,"nodeType":"213","endLine":57,"endColumn":8,"suggestions":"231"},{"ruleId":"182","severity":1,"message":"232","line":2,"column":10,"nodeType":"184","messageId":"185","endLine":2,"endColumn":14},{"ruleId":"182","severity":1,"message":"233","line":3,"column":10,"nodeType":"184","messageId":"185","endLine":3,"endColumn":16},{"ruleId":"198","severity":1,"message":"199","line":12,"column":5,"nodeType":"200","messageId":"201","endLine":34,"endColumn":6},{"ruleId":"182","severity":1,"message":"234","line":17,"column":22,"nodeType":"184","messageId":"185","endLine":17,"endColumn":32},{"ruleId":"182","severity":1,"message":"229","line":1,"column":17,"nodeType":"184","messageId":"185","endLine":1,"endColumn":26},{"ruleId":"182","severity":1,"message":"235","line":1,"column":28,"nodeType":"184","messageId":"185","endLine":1,"endColumn":36},{"ruleId":"182","severity":1,"message":"233","line":3,"column":10,"nodeType":"184","messageId":"185","endLine":3,"endColumn":16},{"ruleId":"182","severity":1,"message":"232","line":4,"column":10,"nodeType":"184","messageId":"185","endLine":4,"endColumn":14},{"ruleId":"211","severity":1,"message":"236","line":36,"column":8,"nodeType":"213","endLine":36,"endColumn":10,"suggestions":"237"},{"ruleId":"182","severity":1,"message":"238","line":4,"column":19,"nodeType":"184","messageId":"185","endLine":4,"endColumn":27},{"ruleId":"182","severity":1,"message":"239","line":26,"column":15,"nodeType":"184","messageId":"185","endLine":26,"endColumn":24},{"ruleId":"182","severity":1,"message":"238","line":2,"column":19,"nodeType":"184","messageId":"185","endLine":2,"endColumn":27},{"ruleId":"182","severity":1,"message":"239","line":30,"column":15,"nodeType":"184","messageId":"185","endLine":30,"endColumn":24},{"ruleId":"182","severity":1,"message":"240","line":2,"column":3,"nodeType":"184","messageId":"185","endLine":2,"endColumn":9},{"ruleId":"182","severity":1,"message":"241","line":3,"column":3,"nodeType":"184","messageId":"185","endLine":3,"endColumn":9},{"ruleId":"182","severity":1,"message":"242","line":4,"column":3,"nodeType":"184","messageId":"185","endLine":4,"endColumn":6},{"ruleId":"182","severity":1,"message":"243","line":5,"column":3,"nodeType":"184","messageId":"185","endLine":5,"endColumn":12},{"ruleId":"182","severity":1,"message":"244","line":7,"column":3,"nodeType":"184","messageId":"185","endLine":7,"endColumn":10},{"ruleId":"182","severity":1,"message":"245","line":12,"column":3,"nodeType":"184","messageId":"185","endLine":12,"endColumn":22},{"ruleId":"182","severity":1,"message":"246","line":13,"column":3,"nodeType":"184","messageId":"185","endLine":13,"endColumn":13},{"ruleId":"182","severity":1,"message":"229","line":1,"column":17,"nodeType":"184","messageId":"185","endLine":1,"endColumn":26},{"ruleId":"182","severity":1,"message":"232","line":4,"column":10,"nodeType":"184","messageId":"185","endLine":4,"endColumn":14},{"ruleId":"211","severity":1,"message":"236","line":32,"column":6,"nodeType":"213","endLine":32,"endColumn":8,"suggestions":"247"},{"ruleId":"182","severity":1,"message":"248","line":28,"column":9,"nodeType":"184","messageId":"185","endLine":28,"endColumn":17},"no-unused-vars","'rating' is defined but never used.","Identifier","unusedVar","'LineComponent' is defined but never used.","'getDocs' is defined but never used.","'collection' is defined but never used.","'where' is defined but never used.","'useLocation' is defined but never used.","'Box' is defined but never used.","'loadSortedQuestion' is defined but never used.","'categoriesData' is assigned a value but never used.","'Timer' is defined but never used.","'rating' is assigned a value but never used.","'timerSeconds' is assigned a value but never used.","'setTImerSeconds' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'res' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'init'. Either include it or remove the dependency array.","ArrayExpression",["249"],"React Hook useEffect has missing dependencies: 'loadRating' and 'stats'. Either include them or remove the dependency array.",["250"],"'answerIdx' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'FormControl' is defined but never used.","'FormLabel' is defined but never used.","'RadioGroup' is defined but never used.","'FormControlLabel' is defined but never used.","'Radio' is defined but never used.","'Button' is defined but never used.","'Play' is defined but never used.","'Component' is defined but never used.","React Hook useEffect has missing dependencies: 'location' and 'userId'. Either include them or remove the dependency array.",["251"],"'Link' is defined but never used.","'Helmet' is defined but never used.","'addHistory' is defined but never used.","'Fragment' is defined but never used.","React Hook useEffect has a missing dependency: 'location'. Either include it or remove the dependency array.",["252"],"'Redirect' is defined but never used.","'errorCode' is assigned a value but never used.","'getDoc' is defined but never used.","'setDoc' is defined but never used.","'doc' is defined but never used.","'updateDoc' is defined but never used.","'orderBy' is defined but never used.","'CollectionReference' is defined but never used.","'arrayUnion' is defined but never used.",["253"],"'snapshot' is assigned a value but never used.",{"desc":"254","fix":"255"},{"desc":"256","fix":"257"},{"desc":"258","fix":"259"},{"desc":"260","fix":"261"},{"desc":"260","fix":"262"},"Update the dependencies array to be: [init]",{"range":"263","text":"264"},"Update the dependencies array to be: [loadRating, questionIdx, stats]",{"range":"265","text":"266"},"Update the dependencies array to be: [location, userId]",{"range":"267","text":"268"},"Update the dependencies array to be: [location]",{"range":"269","text":"270"},{"range":"271","text":"270"},[7700,7702],"[init]",[7810,7823],"[loadRating, questionIdx, stats]",[1665,1667],"[location, userId]",[1103,1105],"[location]",[936,938]]